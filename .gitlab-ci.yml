variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: "tcp://docker:2375"
    # shopware 6
    WEB_DOCUMENT_ROOT: '$CI_PROJECT_DIR/public'
    MYSQL_ROOT_PASSWORD: root
    DEFAULT_PLATFORM_BRANCH: master
    LOG_STDOUT: $CI_PROJECT_DIR/stdout.log

stages:
    - build
    - test
    - prepare-release
    - release

include:
    -   local: .gitlab-ci/release_jobs.yml
    -   local: .gitlab-ci/test_base.yml
    -   local: .gitlab-ci/integration_jobs.yml

Build Test Package:
    stage: build
    tags:
        - release
    only:
        refs:
            - schedules
    image: debian:buster-slim
    services:
        -   name: docker:18.09.7-dind
            alias: docker
    variables:
        GIT_STRATEGY: none
        SPLIT_REPOS: "Administration Storefront Core Elasticsearch Recovery"
        SPLITSH: /opt/splitsh-lite
    cache:
        key: "package_$CI_COMMIT_BRANCH"
        paths:
            - .platform
            - .composer
            - .apt
            - .npm
        policy: pull-push
    before_script:
        - apt-get update
        - DEB_PACKAGES="git jq composer curl docker.io build-essential nodejs php-ctype php-curl php-dom php-fileinfo php-gd php-iconv php-intl php-json php-mbstring php-pdo php-mysql php-simplexml php-xml php-zip"
        # setup caching
        - rm /etc/apt/apt.conf.d/docker-clean
        - cp -a /var/cache/apt .apt
        - echo "Dir::Cache::Archives ${PWD}/.apt;" >> /etc/apt/apt.conf.d/cache.conf
        - apt-get install -y --download-only curl && apt-get install -y curl
        - curl -sL https://deb.nodesource.com/setup_12.x | bash -
        - apt-get install -y --download-only $DEB_PACKAGES && apt-get install -y $DEB_PACKAGES
        - npm config set cache $PWD/.npm
        # we need to do the checkout to have correct permissions. See: https://gitlab.com/gitlab-org/gitlab-runner/-/issues/1736
        - umask 0022
        - git init .
        - git remote add origin ${CI_REPOSITORY_URL}
        - git fetch origin $CI_COMMIT_BRANCH
        - git fetch --tags
        - git checkout -f -q ${CI_COMMIT_SHA}
        - composer config --global  cache-dir $PWD/.composer
        # install helper tools
        - composer install --working-dir=.gitlab-ci/tools
        - '[[ -x $SPLITSH ]] || (curl -sL https://github.com/splitsh/lite/releases/download/v1.0.1/lite_linux_amd64.tar.gz | tar -xz ./splitsh-lite && mv splitsh-lite $SPLITSH)'
        - chmod +x $SPLITSH
        - HASH_CHECK_LINE="ec46c5a409422bf55b26f7de1faab67c2320362934947f984872b3aedc4a9d99  $SPLITSH"
        - echo $HASH_CHECK_LINE | sha256sum -c
    script:
        # clone platform if it's not cached. We use caching to speed up the split
        - export TAG=${TAG:-$(.gitlab-ci/tools/console release:show-next-tag)}
        - '[[ -d .platform/ ]] || git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git -b ${DEFAULT_PLATFORM_BRANCH} --bare .platform'
        - git -C .platform remote set-url origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git
        # Find best matching branch. Example try: 6.3.2.1, 6.3.2, 6.3, master
        - export MATCHING_BRANCH=$(.gitlab-ci/tools/console release:show-platform-branch $TAG .platform)
        - if [[ -z $MATCHING_BRANCH ]]; then echo "No matching branch found" exit 1; fi
        - echo "Checkout platform branch $branch"
        # fetch newest changes from $MATCHING_BRANCH
        - git -C .platform fetch origin ${MATCHING_BRANCH}
        # set HEAD to newest commit in $$MATCHING_BRANCH
        - git -C .platform reset --soft FETCH_HEAD
        # split platform into separate repos/packages
        - >
            for pkg in $SPLIT_REPOS ; do
              .gitlab-ci/split_repo.sh .platform src/${pkg}
              git -C .platform/ rev-parse HEAD > repos/${pkg,,}/PLATFORM_COMMIT_SHA
            done
        # build test package
        - .gitlab-ci/build-nightly.sh
        - IMAGE_TAG=${TAG}-dev
        - docker build . -t "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
        - mkdir artifacts || true
        - chmod 777 artifacts || true
        # TODO: get REFERENCE_INSTALLER_URL and REFERENCE_INSTALLER_SHA256 from shopware6.xml - use MINIMUM_VERSION
        # create package archive file
        - docker run -v $PWD/artifacts:/artifacts -e REFERENCE_INSTALLER_URL -e REFERENCE_INSTALLER_SHA256 --entrypoint=bin/package.sh ${CI_REGISTRY_IMAGE}:${IMAGE_TAG}
        - echo ${TAG} > artifacts/TAG
        - echo ${CI_JOB_ID} > artifacts/PACKAGE_JOB_ID

    artifacts:
        expire_in: 1 week
        paths:
            - artifacts/
            - repos/

# Unit tests

Unit PHP 7.2:
    extends: .unit_base
    image: shopware/development:7.2

Unit PHP 7.3:
    extends: .unit_base
    image: shopware/development:7.3

Unit PHP 7.4:
    extends: .unit_base
    image: shopware/development:7.4

Unit MySQL 5.7:
    extends: .unit_base
    services:
        -   name: mysql:5.7
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

Unit MySQL 8.0:
    extends: .unit_base
    services:
        -   name: mysql:8.0.19
            alias: mysql
            command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci", "--default-authentication-plugin=mysql_native_password"]
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

Unit MariaDB 10.4:
    extends: .unit_base
    services:
        -   name: mariadb:10.4
            alias: mysql
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]

# e2e install tests

Install:
    extends: .e2e_base
    variables:
        GIT_STRATEGY: none
    before_script:
        - export TAG=$(cat artifacts/TAG)
        - export CYPRESS_CACHE_FOLDER="${PWD}/.cypress"
        - npm config set cache $PWD/.npm
    script:
        - cp artifacts/install*.tar.xz install.tar.xz
        - tar -xf install.tar.xz
        - rm install.tar.xz
        - /entrypoint supervisord > /dev/null 2>&1 &
        - apt-get update && apt-get install -y xvfb
        - cd vendor/shopware/recovery/Test/e2e
        - npm clean-install
        - $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/installer/basic.spec.js
    after_script:
        - npx mochawesome-merge .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/mochawesome*.json > .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json
        - npx mochawesome-report-generator .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json --cdn true --reportDir .gitlab-ci/e2e/test/artifacts/mochawesome

# e2e update tests

Manual Update:
    extends: .e2e_update_base
    variables:
        E2E_INSTALL_PACKAGE_URL: $REFERENCE_INSTALLER_URL
        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
    script:
        - unzip -qqo artifacts/update.zip
        - chown -R application:application $CI_PROJECT_DIR
        - cd vendor/shopware/recovery/Test/e2e/
        - npm ci
        - timeout 20m $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/updater/manual-update.spec.js
        - timeout 5m $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/updater/validation/storefront.spec.js
    after_script:
        - npx mochawesome-merge .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/mochawesome*.json > .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json
        - npx mochawesome-report-generator .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json --cdn true --reportDir .gitlab-ci/e2e/test/artifacts/mochawesome

.E2E Update:
    extends: .e2e_update_base
    script:
        - cd .gitlab-ci/e2e/test/
        - timeout 20m $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec cypress/integration/updater/auto-update.spec.js
        - timeout 5m $(npm bin)/cypress run
            --browser chrome --config baseUrl=http://localhost:8000,numTestsKeptInMemory=0
            --env expectedVersion=$TAG
            --spec "cypress/integration/updater/validation/*"
    retry: 2
    artifacts:
        when: always
        expire_in: 1 week
        paths:
            - .gitlab-ci/e2e/test/artifacts/*
            - var/log/*
            - development/var/log/*
            - $CI_PROJECT_DIR/stdout.log

    after_script:
        - npx mochawesome-merge .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/mochawesome*.json > .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json
        - npx mochawesome-report-generator .gitlab-ci/e2e/test/artifacts/mochawesome/single-reports/report-final.json --cdn true --reportDir .gitlab-ci/e2e/test/artifacts/mochawesome

Update (Mysql 8.0):
    extends: .E2E Update
    services:
        -   name: mysql:8.0.19
            alias: mysql
            command: ["mysqld", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci", "--default-authentication-plugin=mysql_native_password"]
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    variables:
        E2E_INSTALL_PACKAGE_URL: $REFERENCE_INSTALLER_URL
        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"

Update:
    extends: .E2E Update
    variables:
        E2E_INSTALL_PACKAGE_URL: $REFERENCE_INSTALLER_URL
        E2E_TEST_DATA_FILE: "v6.1.6_test_data.tar.xz"
