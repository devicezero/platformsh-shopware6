# This file describes an application. You can have multiple applications
# in the same project.

# The name of this app. Must be unique within a project.
name: app

# The type of the application to build.
type: php:7.4
build:
    flavor: composer

dependencies:
    php:
        composer/composer: '^2'

variables:
    env:
        # Tell Shopware to always install in production-mode.
        SHOPWARE_ENV: prod
        # Instance ID is empty by default, change to something unique in your project
        INSTANCE_ID: ''
        # Make sure Symfony HTTP Cache is disabled, we used Redis instead
        SHOPWARE_HTTP_CACHE_ENABLED: 0
        # NVM and Node.js versions to install
        NVM_VERSION: v0.36.0
        NODE_VERSION: v12.19.0
    php:
        upload_max_filesize: 6M

# Specify additional PHP extensions that should be loaded.
runtime:
    extensions:
        - ctype
        - dom
        - iconv
        - mbstring
        - fileinfo
        - intl
        - redis
        - sodium

# The hooks that will be performed when the package is deployed.
hooks:
    build: |
        set -e

        # install nvm
        unset NPM_CONFIG_PREFIX
        export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        # install.sh will automatically install NodeJS based on the presence of $NODE_VERSION
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

        # have nvm available and load the correct node version in your ssh session
        echo 'unset NPM_CONFIG_PREFIX' >> .bash_profile
        echo 'export NO_UPDATE_NOTIFIER=1' >> .bash_profile
        echo 'export NVM_DIR="$PLATFORM_APP_DIR/.nvm"' >> .bash_profile
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> .bash_profile

        # Disable UI installer
        touch install.lock

    deploy: |
        set -e

        # load nvm to use the correct node version for any following commands
        unset NPM_CONFIG_PREFIX
        export NO_UPDATE_NOTIFIER=1
        export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

        if [ "$PLATFORM_BRANCH" != "master" ] && [ "$PLATFORM_BRANCH" != "main" ]; then
            export FRONTEND_URL=`echo $PLATFORM_ROUTES | base64 --decode | jq -r 'to_entries[] | select(.value.id=="shopware") | .key'`
            bin/console sales-channel:update-domain "$FRONTEND_URL"
            bin/console theme:compile
        fi

        # Initialize the Shopware site's data set if it's not already installed.
        if [ ! -f $PLATFORM_APP_DIR/installer/installed ]; then
            # setup the environment

            # create database with a basic setup (admin user and storefront sales channel)
            echo "Running system:install"
            bin/console system:install --create-database --basic-setup --force

            # generate JWT
            echo "Running system:generate-jwt-secret"
            bin/console system:generate-jwt-secret

            # compile theme
            bin/console theme:compile

            # refresh plugins and enable PaaS Plugin
            bin/console plugin:refresh
            bin/console plugin:install --activate SwagPaas

            # mark system as installed
            touch $PLATFORM_APP_DIR/installer/installed
        fi;

        # optional: run migration automatically with deploy
        # bin/console database:migrate --all
        bin/console cache:clear

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
    database: "db:mysql"
    rediscache: "cacheredis:redis"
    # uncomment if you want to use elasticsearch
    # essearch: "searchelastic:elasticsearch"
    # uncomment if you want to use rabbitmq
    # rabbitmqqueue: "queuerabbit:rabbitmq"

# The size of the persistent disk of the application (in MB).
disk: 2048

# The mounts that will be performed when the package is deployed.
mounts:
    "/files":
        source: local
        source_path: "files"
    "/app":
        source: local
        source_path: "app"
    "/config/secrets":
        source: local
        source_path: "config/secrets"
    "/custom/plugins":
        source: local
        source_path: "custom/plugins"
    "/var/cache":
        source: local
        source_path: "var/cache"
    "/var/queue":
        source: local
        source_path: "var/queue"
    "/var/log":
        source: local
        source_path: "var/log"
    "/public/css":
        source: local
        source_path: "public/css"
    "/public/fonts":
        source: local
        source_path: "public/fonts"
    "/public/js":
        source: local
        source_path: "public/js"
    "/public/media":
        source: local
        source_path: "public/media"
    "/public/thumbnail":
        source: local
        source_path: "public/thumbnail"
    "/public/theme":
        source: local
        source_path: "public/theme"
    "/public/bundles":
        source: local
        source_path: "public/bundles"
    "/config/jwt":
        source: local
        source_path: "config/jwt"
    "/installer":
        source: local
        source_path: "installer"
    "/.global/cache":
        source: local
        source_path: "global/cache"
    "/custom/apps":
        source: local
        source_path: "custom/apps"

# The configuration of app when it is exposed to the web.
web:
    locations:
        "/":
            # The public directory of the app, relative to its root.
            root: "public"
            # The front-controller script to send non-static requests to.
            passthru: "/index.php"
            expires: 24h
            rules:
                \.(css|js|gif|jpe?g|png|ttf|eot|woff2?|otf|cast|mp4|json|yaml|ico|svg?|cast|mp4|json|yaml|svg?|ttf)$:
                    expires: 4w

workers:
    queue:
        disk: 128
        commands:
            start: |
                bin/console messenger:consume default --memory-limit=$(cat /run/config.json | jq .info.limits.memory)M --time-limit=295
