#stages:
#    - build
#    - test
#    - prepare-release
#    - release


.install_alpine_deps: &install_alpine_deps
    - apk --no-cache add npm openssh-client git bash jq composer php-ctype php-curl php-dom php-fileinfo php-gd php-iconv php-intl php-json php-mbstring php-pdo php-pdo_mysql php-simplexml php-xml php-zip php-xmlwriter php-tokenizer php-sodium php-session

Test alpine image install:
    stage: test
    image: alpine:3.13
    only:
        refs:
            - schedules
            - merge_requests
    before_script: []
    script:
        - *install_alpine_deps
        - composer install

Test docker image install:
    extends: Test alpine image install
    image: docker:19

Prepare release:
    stage: prepare-release
    image: debian:bullseye-slim
    needs: ['Build Test Package']
    when: manual
    only:
        refs:
            - schedules
        variables:
            # only run this job if it's protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    variables:
        GIT_STRATEGY: clone
        PACKAGE_BASE_URL: "https://releases.shopware.com/sw6/"
    before_script:
        - apt-get update && apt-get install -y git openssh-client composer php-ctype php-curl php-dom php-fileinfo php-gd php-iconv php-intl php-json php-mbstring php-pdo php-mysql php-simplexml php-xml php-zip
        - composer install --working-dir=.gitlab-ci/tools
        - eval $(ssh-agent -s)
        - chmod 600 $SSH_PRIVATE_KEY_FILE && ssh-add $SSH_PRIVATE_KEY_FILE
        - '[[ -f /.dockerenv ]] && mkdir -p ~/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    script:
        - '[[ -e artifacts/install.zip && -e artifacts/update.zip ]]'
        - export MINIMUM_VERSION=${MINIMUM_VERSION:-6.2.2}
        - export TAG=$(cat artifacts/TAG)
        - .gitlab-ci/tools/console release:prepare $TAG --deploy

Release tags:
    stage: release
    image: alpine:3.13
    when: manual
    only:
        refs:
            - schedules
        variables:
            # only run this job if it's protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    variables:
        GIT_STRATEGY: clone
        MANY_REPO_BASE_URL: "git@gitlab.shopware.com:shopware/6/product/many-repositories"
        PLATFORM_REPO_URL: "git@gitlab.shopware.com:shopware/6/product/platform"
        CI_REPOSITORY_URL: "git@gitlab.shopware.com:/shopware/6/product/production"
    before_script:
        - *install_alpine_deps
        - mkdir -p ~/.ssh/
        - echo -e "$SHOPWAREBOT_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - eval `ssh-agent -s`
        - ssh-add ~/.ssh/id_rsa
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - '[[ -f /.dockerenv ]] && mkdir -p ~/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - git config --global user.email $GIT_EMAIL
        - git config --global user.name $GIT_USER
        - composer install --working-dir=.gitlab-ci/tools
        - export TAG=${TAG:-$(cat artifacts/TAG)}
    script:
        - export PROJECT_ROOT=$(pwd)
        - cp artifacts/install*.tar.xz install.tar.xz
        # copy vendor and composer.lock from tested package
        - tar -xf install.tar.xz ./vendor ./composer.lock
        # create tags, push repos/*, update composer.lock with pushed versions, tag prod, push tag, create mr
        - .gitlab-ci/tools/console release:tags $TAG

Clear cache:
    stage: release
    image: alpine:3.13
    when: manual
    only:
        refs:
            - schedules
        variables:
            # only run this job if it's protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    before_script:
        - apk --no-cache add curl
    script:
        - curl -X DELETE --user "$SHOPWARE_COM_API_AUTH" "$SHOPWARE_COM_API_URL"

Build package:
    stage: build
    only:
        refs:
            - tags
        variables:
            # only run this job if the tag is protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    image: docker:19
    services:
        -   name: docker:18.09.7-dind
            alias: docker
    variables:
        GIT_STRATEGY: none
        SHOPWARE_SKIP_BUNDLE_DUMP: 1
        SHOPWARE_SKIP_ASSET_COPY: 1
        SHOPWARE_SKIP_THEME_COMPILE: 1
    before_script:
        - *install_alpine_deps
        - umask 0022
        - git init .
        - git remote add origin ${CI_REPOSITORY_URL}
        - git fetch origin ${CI_COMMIT_SHA}
        - git checkout -f -q ${CI_COMMIT_SHA}
        - git init .platform
        - git -C .platform remote add origin https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git
        - git -C .platform fetch origin $(cat PLATFORM_COMMIT_SHA)
        # set platform HEAD to commit in PLATFORM_COMMIT_SHA file
        - git -C .platform reset --soft FETCH_HEAD
        - git -C .platform fetch --tags origin
    script:
        - composer install --no-interaction
        - docker build . -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
        - mkdir artifacts || true
        - chmod 777 artifacts || true
        - .gitlab-ci/changed-files.sh > artifacts/additional_update_files
        - .gitlab-ci/changed-files.sh --deleted > artifacts/additional_deleted_files
        - docker run
            -v $PWD/artifacts:/artifacts
            -e REFERENCE_INSTALLER_URL -e REFERENCE_INSTALLER_SHA256
            --entrypoint=bin/package.sh ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
            /artifacts/additional_update_files
            /artifacts/additional_deleted_files
        - echo ${CI_COMMIT_TAG} > artifacts/TAG
        - echo ${CI_JOB_ID} > artifacts/PACKAGE_JOB_ID
    artifacts:
        when: always
        paths:
            - artifacts/

Release package:
    stage: release
    image: debian:bullseye-slim
    only:
        refs:
            - tags
        variables:
            # only run this job if it's protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    variables:
        GIT_STRATEGY: clone
    before_script:
        - apt-get update && apt-get install -y git openssh-client composer php-ctype php-curl php-dom php-fileinfo php-gd php-iconv php-intl php-json php-mbstring php-pdo php-mysql php-simplexml php-xml php-zip
        - composer install --working-dir=.gitlab-ci/tools
        - eval $(ssh-agent -s)
        - chmod 600 $SSH_PRIVATE_KEY_FILE && ssh-add $SSH_PRIVATE_KEY_FILE
        - '[[ -f /.dockerenv ]] && mkdir -p ~/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    script:
        - '[[ -e artifacts/install.zip && -e artifacts/update.zip ]]'
        - .gitlab-ci/tools/console release:package ${CI_COMMIT_TAG} --deploy

# TODO:
# *
# * Add SBP-Version
# * create github releases
# * make sbp-version public
# * deploy test system?
