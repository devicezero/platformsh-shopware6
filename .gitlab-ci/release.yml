
Release-Package:
    stage: build
    only:
        refs:
            - tags
        variables:
            # only run this job if the tag is protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    image: docker
    services:
        -   name: docker:18.09.7-dind
            alias: docker
    variables:
        GIT_STRATEGY: none
    before_script:
        - apk add git bash jq composer npm
        - umask 0022
        - git init .
        - git remote add origin ${CI_REPOSITORY_URL}
        - git fetch origin ${CI_COMMIT_SHA}
        - git checkout -f -q ${CI_COMMIT_SHA}
    script:
        - composer install --ignore-platform-reqs --no-interaction
        - docker build . -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
        - mkdir artifacts || true
        - chmod 777 artifacts || true
        - docker run -v $PWD/artifacts:/artifacts -e REFERENCE_INSTALLER_URL -e REFERENCE_INSTALLER_SHA256 --entrypoint=bin/package.sh ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
        - mv artifacts/install.tar.xz artifacts/install_${CI_COMMIT_TAG}.tar.xz
    artifacts:
        paths:
            - artifacts/

Insert-Release-Data:
    stage: deploy
    image: debian:buster-slim
    when: manual
    only:
        refs:
            - tags
            - schedules
        variables:
            # only run this job if it's protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    variables:
        GIT_STRATEGY: clone
        PACKAGE_BASE_URL: "https://releases.shopware.com/sw6/"
    before_script:
        - apt-get update && apt-get install -y git openssh-client composer php-dom python3-pip
        - pip3 install -Iv s3cmd==2.0.2
        - composer install --working-dir=.gitlab-ci/tools
        - eval $(ssh-agent -s)
        - chmod 600 $SSH_PRIVATE_KEY_FILE && ssh-add $SSH_PRIVATE_KEY_FILE
        - '[[ -f /.dockerenv ]] && mkdir -p ~/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    script:
        - 'set -x'
        - '[[ -e artifacts/install.zip && -e artifacts/update.zip ]]'
        - git fetch --tags
        - export TAG=${CI_COMMIT_TAG:-${TAG:-$(.gitlab-ci/tools/console show-next-tag --minimum-stability "$MINIMUM_STABILITY")}}
        - >
            case $TAG in
              *-rc*) BUILD_CHANNEL=80;;
              *-RC*) BUILD_CHANNEL=80;;
              *-beta*) BUILD_CHANNEL=60;;
              *-alpha*) BUILD_CHANNEL=40;;
              *-dev*) BUILD_CHANNEL=20;;
              *) BUILD_CHANNEL=100;;
            esac
        - 'IFS="-" read -ra VERSION_PARTS <<< "$TAG"'
        - export BUILD_VERSION=${VERSION_PARTS[0]#"v"}
        - export BUILD_VERSION_TEXT=${VERSION_PARTS[1]}
        - '[[ -n $BUILD_VERSION ]]'
        - TSTAMP=$(date +%s)
        - 'INSTALL_FILE=artifacts/install_${TAG#"v"}_${TSTAMP}.zip'
        - 'UPDATE_FILE=artifacts/update_${TAG#"v"}_${TSTAMP}.zip'
        - mv artifacts/install.zip $INSTALL_FILE
        - mv artifacts/update.zip $UPDATE_FILE
        - s3cmd put artifacts/*.zip s3://releases.s3.shopware.com/sw6/ --acl-public
        - s3cmd put artifacts/*.xz s3://releases.s3.shopware.com/sw6/ --acl-public
        - VERSION_TEXT_PARAM=
        - export MINIMUM_VERSION=${MINIMUM_VERSION:-6.1.0}
        - if [[ -n ${BUILD_VERSION_TEXT} ]]; then VERSION_TEXT_PARAM="--version-text=${BUILD_VERSION_TEXT}"; fi
        - ssh shopware@${UPDATE_API_HOST} php /var/www/shopware-update-api/bin/console insert:release:data
          --release-version=${BUILD_VERSION} ${VERSION_TEXT_PARAM}
          --channel=${BUILD_CHANNEL}
          --min-version=${MINIMUM_VERSION}
          --install-uri=${PACKAGE_BASE_URL}$(basename $INSTALL_FILE)
          --install-size=$(stat -c %s $INSTALL_FILE)
          --install-sha1=$(sha1sum $INSTALL_FILE | cut -d ' ' -f 1)
          --install-sha256=$(sha256sum $INSTALL_FILE | cut -d ' ' -f 1)
          --update-uri=${PACKAGE_BASE_URL}$(basename $UPDATE_FILE)
          --update-size=$(stat -c %s $UPDATE_FILE) --update-sha1=$(sha1sum $UPDATE_FILE | cut -d ' ' -f 1)
          --update-sha256=$(sha256sum $UPDATE_FILE | cut -d ' ' -f 1)


Create-Release-Branch:
    stage: deploy
    image: alpine:3.10
    when: manual
    only:
        refs:
            - schedules
        variables:
            # only run this job if it's protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    variables:
        GIT_STRATEGY: clone
        MANY_REPO_BASE_URL: "git@gitlab.shopware.com:shopware/6/product/many-repositories"
        MANY_REPO_GITHUB_URL: "https://api.github.com/repos/shopware/"
        TARGET_BRANCH: $PLATFORM_BRANCH
        CI_REPOSITORY_URL: "git@gitlab.shopware.com:/shopware/6/product/production"
    before_script:
        - apk --no-cache add openssh-client git bash jq composer php-dom php-tokenizer php-xmlwriter php-xml curl curl-dev
        - mkdir -p ~/.ssh/
        - echo -e "$SHOPWAREBOT_PRIVATE_KEY" > ~/.ssh/id_rsa
        - chmod 600 ~/.ssh/id_rsa
        - eval `ssh-agent -s`
        - ssh-add ~/.ssh/id_rsa
        - ssh-keyscan github.com >> ~/.ssh/known_hosts
        - '[[ -f /.dockerenv ]] && mkdir -p ~/.ssh/ && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
        - git config --global user.email $GIT_EMAIL
        - git config --global user.name $GIT_USER
        - composer install --working-dir=.gitlab-ci/tools
        - git fetch --tags
        - export TAG=${TAG:-$(.gitlab-ci/tools/console show-next-tag --minimum-stability "$MINIMUM_STABILITY")}
    script:
        - export PROJECT_ROOT=$(pwd)
        - cp artifacts/install_*.tar.xz install.tar.xz
        # copy vendor and composer.lock from tested package
        - tar -xf install.tar.xz ./vendor ./composer.lock
        # create tags, push repos/*, update composer.lock with pushed versions, tag prod, push tag, create mr
        - .gitlab-ci/tools/console create-release-branch $TAG

# Upload test package to s3 - these can be used to test (upcoming) releases
Upload-Test-Package:
    stage: deploy
    image: debian:buster-slim
    only:
        refs:
            - tags
            - schedules
        variables:
            # only run this job if it's protected
            - $CI_COMMIT_REF_PROTECTED == "true"
    variables:
        GIT_STRATEGY: clone
    before_script:
        - apt-get update && apt-get install -y python3-pip
        - pip3 install -Iv s3cmd==2.0.2
    script:
        - set -x
        - cd artifacts
        - INSTALL=$(ls install_*.tar.xz)
        - s3cmd put $INSTALL s3://releases.s3.shopware.com/sw6/ --acl-public
        - s3cmd put $INSTALL s3://releases.s3.shopware.com/sw6/install_${PLATFORM_BRANCH}_next.tar.xz --acl-public

# TODO:

# *
# * Add SBP-Version
# * Add version to release.xml
# * Publish version in release.xml
# * Publish version in update api
# *
.Tag-Platform:
    stage: deploy
    only:
        - tags
    image: docker
    when: manual
    before_script:
        - apk add git bash jq composer npm
        - git config --global user.email $GIT_EMAIL
        - git config --global user.name $GIT_USER
    script:
        - echo "Tag platform"
        - echo checkout PLATFORM_COMMIT_SHA
        - echo tag platform with ${TAG}
# * Setup test system?
